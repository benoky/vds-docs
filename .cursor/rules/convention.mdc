---
description: 
globs: 
alwaysApply: false
---
# Frontend Coding Convention

## 1. 프로젝트 구조

### 1.1 컴포넌트 디자인 패턴

**커스텀 훅(Custom hook) 디자인 패턴**

- 비즈니스 로직 중 `use`를 사용하는 로직을 커스텀 훅으로 분리하여 관리
- 훅을 사용하지 않는 일반적인 로직은 `util 함수`로 분리
- React의 기본 훅뿐만 아니라, 커스텀 훅을 사용하는 로직도 커스텀 훅으로 분리 가능
- 단, 다음과 같은 경우엔 분리하지 않음
    - 해당 로직이 재사용 가능성이 없는 경우
    - 로직이 너무 간단한 경우
    - 특정 컴포넌트 내에서만 의미가 있는 경우

공통으로 사용 가능한 비즈니스 로직 중 훅을 사용하는 비즈니스 로직은 커스텀 훅으로,
그렇지 않은 로직은 일반적인 util 함수로 분리하여 관리합니다.
커스텀 훅의 경우 반드시 `use` 접두사를 붙여야 합니다.

또한, 기본적으로 제공되는 리액트 훅뿐만 아니라 사용자가 정의한 커스텀 훅을 사용하는 비즈니스 로직 또한 커스텀 훅으로 분리할 수 있습니다.

만약 훅을 사용하는 비즈니스 로직이 재사용 가능성이 없는 경우,
로직이 너무 간단한 경우, 해당 컴포넌트 내에서만 의미가 있을 경우 커스텀 훅으로 분리하지 않습니다.

컴포넌트의 경우 또한 재사용이 가능한 컴포넌트만 분리하여 구현합니다.

### 1.2 디렉토리 구조

```
front/
├── public/                # 정적 파일 (파비콘, 이미지 등)
├── src/                   # 소스 코드
│   ├── assets/            # 이미지, 폰트 등 정적 리소스
│   ├── components/        # 재사용 가능한 컴포넌트
│   ├── config/            # 설정 파일
│   ├── hooks/             # 커스텀 훅
│   ├── pages/             # 페이지 컴포넌트
│   ├── services/          # API 및 외부 서비스 연동 로직
│   ├── store/             # 상태 관리 (Context API, Redux 등)
│   ├── types/             # 타입 정의 파일
│   ├── utils/             # 유틸리티 함수
│   ├── App.tsx            # 앱의 메인 컴포넌트
│   └── main.tsx           # 앱의 진입점
├── .env.local             # 로컬 환경 변수
├── .env.dev               # 개발 환경 변수
├── .env.prod              # 운영 환경 변수
├── .eslintrc.js           # ESLint 설정
├── .prettierrc            # Prettier 설정
├── vite.config.ts         # Vite 설정
└── tsconfig.json          # TypeScript 설정

```

## 2. 명명 규칙

### 2.1 파일 명 작성

- 컴포넌트 파일(.tsx): 컴포넌트 파일의 파일 명은 Pascal Case로 작성합니다.
- 일반 함수 파일(.ts): custom hook, util 등은 camel Case로 작성합니다.
- 타입 파일(.type.ts): type을 정의한 파일인 경우 [camel Case].types.ts로 작성합니다.

### 2.2 컴포넌트 및 함수 작성

해당 프로젝트에서는 기본적으로 함수를 선언할 때 아래와 같은 방법을 사용합니다.

- 화살표 함수 (Arrow Function)

컴포넌트 함수 선언 시에는 Arrow Function으로 작성하고 파라미터는 Props라는 명칭으로 입력 받습니다.

또한 Props의 타입은 소스의 상단에 선언하여 사용합니다.

컴포넌트의 props는 파라미터에서 구조 분해 하는 것이 아니라 컴포넌트 함수 내의 상단에

`const {name, age} = props;`  와 같이 함수 내부 구조 분해 방식으로 선언하여 사용합니다.

이후 컴포넌트를 다른 컴포넌트에서 사용하기 위해 export default로 내보내기 합니다.

```tsx
// 컴포넌트 props 타입 선언
interface HelloPropsType {
  name: string;
  age: number;
}

/**
 * 버튼 클릭 시 이름와 나이를 표시하는 컴포넌트
 * @param props - 컴포넌트 속성
 * @param props.name - 사용자 이름
 * @param props.age - 사용자 나이
 * @returns JSX.Element - 렌더링될 React 컴포넌트
 */
const Hello = (props: HelloPropsType) => {
  const {name, age} = props; // 컴포넌트의 props는 내부 구조 분해 방식으로 할당

  return (
    <div>
      <h1>Hello, {name}!</h1>
      {/* inline callback 선언 시 Arrow Function 으로 구현 */}
      <button onClick={() => alert(`Hi, ${name}!`)}>Say Hi</button>
    </div>
  );
};

// 소스 파일의 하단에 컴포넌트 export 구문 작성
export default Hello;

```

일반 함수의 경우에도 화살표 함수 (Arrow Function)로 작성합니다.

컴포넌트가 아닌 일반적인 함수의 경우 별도의 type을 선언하지 않고 파라미터에 타입을 지정합니다.

```tsx
/**
 * HTML Tag 제거
 * @param content - HTML tag가 포함된 문자열
 * @returns 태그가 제거된 문자열
 */
const removeHTMLTag = (content: string): string => {
  const regx = /<[^>]+>|&nbsp;/gi;
  if (content) {
    return content.replace(regx, '');
  }
  return content;
};

export { removeHTMLTag };

```

### 2.3 type 정의

string, number 등 typescript에서 기본적으로 제공하는 타입 외 필요한 타입이 있을 경우 직접 타입을 정의하여 사용합니다.

타입은 보통 interface와 type 문법을 이용하여 선언합니다.

```tsx
// interface문을 이용한 타입 선언
interface UserType {
  id: number;
  name: string;
  email: string;
}

// type문을 이용한 타입 선언
type StatusType = 'pending' | 'approved' | 'rejected';

```

만약 User라는 타입이 이미 존재하는 상태에서 User 타입이 가지는 값에 이어 추가적으로 role 이라는 타입이 추가로 필요한 경우 또는 기존 타입 속성에 있어 삭제, 덮어쓰기 등이 필요한 경우 아래와 같이 기존에 존재하는 타입을 확장, 변경하여 사용할 수 있습니다.

```tsx
// interface문
interface AdminUserType extends UserType {
  role: 'admin' | 'user'; // role 속성 추가
  email: 'premium@example.com'; // email 속성 덮어쓰기(이 경우 premium@example.com 라는 값만 들어갈 수 있습니다.)
}
// name 속성 제거
type UserWithoutNameType = Omit<UserType, 'name'>;

// type 문
type ExtendedStatusType = StatusType | 'in-progress' | 'canceled'; // 새로운 상태 값 추가
type StatusWithoutRejectedType = Exclude<StatusType, 'rejected'>; // 기존 상태 값 제거
type ModifiedStatusType = Exclude<StatusType, 'rejected'> | 'canceled'; // 기존 상태 값 제거 및 새로운 상태 값 추가

```

기본적으로 interface문을 이용하여 타입을 선언하고 만약, 여러 속성을 가진 타입이 아닌 유니언 타입을 선언할 경우에만 type문을 사용하여 타입을 정의합니다.

선언한 타입이 해당 컴포넌트에서만 사용될 경우 별도의 export없이 해당 컴포넌트 파일의 최상단에 정의하여 사용하며 만약 전역으로(재사용) 사용되어야 하는 타입일 경우 `src/types/`경로에 `[도메인 명].types.ts`파일을 생성하여 타입을 정의합니다.

```tsx
// 타입을 다른 파일에서도 사용하기 위해 OO.types.ts파일에 타입 선언 후 export 문 추가
export interface UserType {
  id: number;
  name: string;
  email: string;
}

```

<aside>
💡

타입 명은 PascalCase를 따르며 접미사로 Type을 붙입니다.

</aside>

## 3. JSDoc 주석 작성

컴포넌트를 포함한 함수 작성 시 함수에 대해 JSDoc 주석으로 같이 작성해야 하며, 다음 형식을 준수해야 합니다:

- 함수에 대한 간결한 설명
- @param 태그를 사용하여 각 매개변수의 이름, 설명 및 타입 명시
- @returns 태그를 사용하여 반환 값의 설명 및 타입 명시
- 예시:

```tsx
/**
 * 사용자 정보를 업데이트하는 함수
 * @param {타입} userId - 업데이트할 사용자의 ID
 * @param {타입} userData - 업데이트할 사용자 정보
 * @returns {타입} 업데이트된 사용자 정보 객체
 */

```


- 이 외 타입을 명시한 interface나 type에는 별도의 JSDoc을 작성할 필요는 없습니다.